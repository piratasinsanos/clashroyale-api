language: node_js

node_js:
- "11.1.0"

# Install services
services:
- mongodb
- docker

# Cache Gcloud SDK between commands
cache:
    directories:
    - "$HOME/google-cloud-sdk/"
    - "node_modules"

env:
    global:
    - DATABASE_URL="mongodb://127.0.0.1:27017/clashroyale"
    - DATABASE_NAME="clashroyale"
    - RSA_PUBLIC_KEY="clashroyale-public.pem"
    - RSA_RIVATE_KEY="clashroyale-private.pem"
    - NODE_ENV="test"
    - CI=true
#    - GOOGLE_APPLICATION_CREDENTIALS=~/gcloud-service-key.json
#    - PROJECT_NAME_STG=<YOUR_PROJECT_NAME>
#    - CLUSTER_NAME_STG=<YOUR_CLUSTER_NAME>
#    - PROJECT_NAME_PRD=<YOUR_PROJECT_NAME>
#    - CLUSTER_NAME_PRD=<YOUR_CLUSTER_NAME>
#    - CLOUDSDK_COMPUTE_ZONE=<YOUR_GCLOUD_COMPUTE_ZONE>
#    - DOCKER_IMAGE_NAME=appexample
#    - KUBE_DEPLOYMENT_NAME=appexample
#    - KUBE_DEPLOYMENT_CONTAINER_NAME=appexample

before_install:
- npm install -g greenkeeper-lockfile@1
- openssl genrsa 4096 -aes256 > clashroyale.pem
- openssl pkcs8 -topk8 -inform PEM -outform PEM -in clashroyale.pem -out clashroyale-private.pem -nocrypt
- openssl rsa -in clashroyale-private.pem -pubout -outform PEM -out clashroyale-public.pem
- mongo clashroyale --eval 'db.createUser({user:"clashroyale", pwd:"clashroyale", roles:["readWrite"]});'

install:
- npm install

script:
- npm test

before_script:
- greenkeeper-lockfile-update

after_script:
- greenkeeper-lockfile-upload

after_success:
- npm run coverage

#before_deploy:
#- if [ ! -d "$HOME/google-cloud-sdk/bin" ]; then rm -rf $HOME/google-cloud-sdk; export CLOUDSDK_CORE_DISABLE_PROMPTS=1; curl https://sdk.cloud.google.com | bash; fi
#- source /home/travis/google-cloud-sdk/path.bash.inc
#- gcloud --quiet version
#- gcloud --quiet components update
#- gcloud --quiet components beta update
#- gcloud --quiet components update kubectl

#deploy:
#- provider: script
#  script: ./deploy-staging.sh
#  skip_cleanup: true
#  on:
#      branch: develop
#- provider: script
#  script: ./deploy-production.sh
#  skip_cleanup: true
#  on:
#      branch: master

notifications:
    email:
        on_success: never
        on_failure: always
    slack:
        rooms:
        - secure: IC5JvKbQrf+f2FG+9GWRTX7rYL4Ex1/aMC+ycDiMgnM8rXSbsWnrNtbzWTthGPurkcOkCjkgG9NMHYv44dJr1f/03Dsq7VHebsj5t/5TFVrTTJ1NSKTGpIRN2QjvR0XTOqiI16NLs9bgc5n69WN4BR+9UIQnQi8G0uMnJjJE8R+BQIO1VdiNJfI4nCybWdEfAZsjd6uozdr0pN5AXmBLyZSjG6qRVo9YBLdiQCZrjtj/ZPrmwot7wGTH11PhQyxrh2luKbOIC4lZBRw+6EU5/7shgwHry5c42RomzpMEk7eHkYKiM5FDS1BTHl1dkAUoT8x43dBV4ddNfiYdBzyBim0C66/7dw0Y67An4QBFtHcXmaCy1437VjbcF4StpyAh9/2AsmPjLMuKCc0ZMSvSHirdHiToV1+mzEPWeu1/p6ylRgv4RcPBNc0lb9PMrkY4h1ZL7XrvXmPpR6/tZrha5Qbpbjoa7MxW8qi/G4cYhTl8PHxIbdmD4ldihZUQyz7U6y4Vbsy2Nkv+42wG0xFrJ9tfPE3EuHizjAXzzzVRN8pZjaEv1uuNRb7yHT1slqLXc4aHFlqXlDWRWyEiX0FFEN6BiRgxGT8SOOMkiMEjMDKW8x3j37ygiNZJG8s7pXAMmVRB65OIl+SxdCvKhbNBh0bBd9fM4CR9S8HN+MSqmCY=
        - secure: NiJDiA7MsqM4VBgI01YxkxUGf9lExDL6cXn61jkvnDr2XEzr/2efHpqhtoLrjEUyFsMdYRflRN3xIgNHG7w+LPU8g3y0HxaYYqnK8b+xjwwv6ym7prDtSBV7BO6kgBsUz/hFycVCAH3SNl6LgWSjNEjaOieogDbRYlc/1QI+KadImtcldzGIGTrzlXl5GPOU1IiGivvxQL0vIEUxWLjS8hYLMkazDQj+WleYLGwCR+dCp+Ia6EQUtx0Eda6SZMf2m6yOyZo3KLoogsO6pUalt6ZQ7RRRyTR24Ah718Qgyn9jocnQeronHe6rK7UjqHZorWNRzlVTrbuHeGSA81RgrDXNGam+6dr8diazJ6/BEy0nhP6pI8Svn0XlbludMzwsEKo01G5LsjKB8eXxtV7MY3C937fQqaUojhTstMtJiIVz+QFfCR9GacgJbCMbgW0gnR/eC79xbcUIqp3bCRjzIuxswnigedzp7STAqwARkW9Ub8IVAU00QHVUuTOF9AynggivvGFznyFz2tGCVNeojnk0iQ7hLyVQmS/O3ucI0NLTiCYSjfqfyiPw6lJXavbFJPcxqEKE8W359W/gogj41aja+ATqKg6n6dCu5QLR7ExEtynJ48hbjXVQ7gCAdL9odAPwZiwMD6epIwklZJ9QF2bdEPaL2W2YQgIvcEl6V/Q=
